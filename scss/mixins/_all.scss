




/*------------------------------------*\
    $MIXINS
\*------------------------------------*/



// Mediqueries y breakpoints: El mixin consta de 4 partes
//
//  $breakpoint: Es el Brakpoint o la variable de breakpoint, las definimos en _variables.scss
//               las que vienen por defecto: $bp1, $bp2, $bp3, $bp4 y $bp5.
//
//  $query1: max o min, dependiendo de como queremos el Mediaquery que funcione:
//           max-width, min-width, min-device-width, etc... - 'min' por defecto -
//
//  $query2: La segunda parte del query, lo que va después de 'min' o 'max'.
//           -device-width, -device-height, -width etc...  - 'width' por defecto -
//
//  $target: El medio. PUede ser 'all', 'screen', 'print', etc...
//           - '' por defecto -
//  USO:
//
//  **************************************************************************
//
//  $bp1 : 45em;
//
// .texto {
// 	color:red;
// 	@include media-query-bp($bp1,max,device-width,screen) {
// 		color: blue;
// 	}
// }
//
//  **************************************************************************
//
// Compilaría:
//
//  **************************************************************************
// .texto {
// color: red; }
// @media screen and (max-device-width: 45em) {
//   .texto {
//     color: blue; } }
//  **************************************************************************
//
// Y en la hoja de estilos para navegadores que no soportan mediaqueries
// compilaría lo siguiente (componenter/no-mq.scss):
//
//  **************************************************************************
//
// .texto {
// color: red; }
// .ie8-sucks .texto {
//   color: blue; }
//
//  **************************************************************************
//
// La clase .ie8-sucks se puede cambiar en la configuración de variables.
//
//



@mixin media-query-bp($breakpoint, $query1: min, $query2: width, $target: "") {

	// Check if media queries are supported
	@if $media-queries-supported == true {
		@if $target != "" {
			@media #{$target} and (#{$query1}-#{$query2}: #{$breakpoint}) {
				@content;
			}
		}
		@else {
			@media (#{$query1}-#{$query2}: #{$breakpoint}) {
				@content;
			}
		}
	}
	@else {
		#{$no-mq-classname} & {
			@content;
		}
	}
}

  /**
  * Centrar y dar un ancho máximo igual a $pagemaxwidth.
  */
@mixin max-width($max-width : $pagemaxwidth)  {
	margin-left:auto;
	margin-right:auto;
	max-width: $max-width;
	width:100%;
}


// flexbox, because fuck you, that's why.

@mixin displayflex {
	display : -webkit-box;
	display : -moz-box;
	display : -ms-flexbox;
	display : -webkit-flex;
	display : flex;
}

@mixin align-items($align) {
	@include prefixer (align-items, $align, webkit moz ms o spec );
}

@mixin flex($flex, $width) {
	@include prefixer (box-flex, $flex, webkit moz);
	@include prefixer (flex, $flex, webkit ms spec);

	width : $width;
}
	

@mixin order($order) {
	@include prefixer (box-ordinal-group, $order, webkit moz);
	@include prefixer (flex-order, $order, ms);
	@include prefixer (order, $order, webkit spec);
}

// $include flex-start(VALUE) (flex-start | flex-end | center | space-between | space-around)
@mixin content-justify($justify) {
	@include prefixer (content-justify, $justify, wwebkit moz o spec);
}

// $include flex-direction(VALUE) (row | row-reverse | column | column-reverse)
@mixin flex-direction($direction) {
	@include prefixer (flex-direction, $direction, wwebkit moz o spec);
}


// gradients
@mixin horizontal($startColor : $white, $endColor : $lightergrey) {
	background-color: $endColor;
	background-image  : -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image  : -webkit-linear-gradient(left, $startColor, $endColor);                   // Safari 5.1+, Chrome 10+
	background-image  : -moz-linear-gradient(left, $startColor, $endColor);                      // FF 3.6+
	background-image  : -ms-linear-gradient(left, $startColor, $endColor);                       // IE10
	background-image  : -o-linear-gradient(left, $startColor, $endColor);                        // Opera 11.10
	background-image  : linear-gradient(left, $startColor, $endColor);                           // W3C
	background-repeat : repeat-x;
}

@mixin vertical($startColor : $white, $endColor:  $lightergrey) {
	background-image  : -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image  : -webkit-linear-gradient(top, $startColor, $endColor);                    // Safari 5.1+, Chrome 10+
	background-color  : $endColor;
	background-image  : -moz-linear-gradient(top, $startColor, $endColor);                       // FF 3.6+
	background-image  : -ms-linear-gradient(top, $startColor, $endColor);                        // IE10
	background-image  : -o-linear-gradient(top, $startColor, $endColor);                         // Opera 11.10
	background-image  : linear-gradient(top, $startColor, $endColor);                            // W3C
	background-repeat : repeat-x;
}

@mixin directional($startColor : $white, $endColor : $lightergrey, $deg : 45deg) {
	background-color  : $endColor;
	background-image  : -moz-linear-gradient($deg, $startColor, $endColor);                     // FF 3.6+
	background-image  : -ms-linear-gradient($deg, $startColor, $endColor);                      // IE10
	background-image  : -webkit-linear-gradient($deg, $startColor, $endColor);                  // Safari 5.1+, Chrome 10+
	background-image  : -o-linear-gradient($deg, $startColor, $endColor);                       // Opera 11.10
	background-image  : linear-gradient($deg, $startColor, $endColor);                          // W3C
	background-repeat : repeat-x;
}

@mixin border-radius2($bordersize: 0) {
	//@include prefixer(bordersize, $bordersize, webkit moz o ms spec);
	// -webkit-border-top-right-radius : $bordersize;
	// -webkit-border-bottom-right-radius : $bordersize;
	// -webkit-border-bottom-left-radius : $bottomleft;
	// -webkit-border-top-left-radius : $topleft;
	// -moz-border-radius-topright : $topright;
	// -moz-border-radius-bottomright : $bottomright;
	// -moz-border-radius-bottomleft : $bottomleft;
	// -moz-border-radius-topleft : $topleft;
	// border-top-right-radius : $bordersize;
	// border-bottom-right-radius : $bordersize;
	// border-bottom-left-radius : $bordersize;
	// border-top-left-radius : $topleft;
	// -webkit-background-clip : padding-box;
	// -moz-background-clip : padding;
	// background-clip : padding-box;
}

@mixin border-image($_border-image-source, $_border-image-slice, $_border-image-width, $_border-image-repeat ) {
	@if not $_border-image-source {
		-webkit-border-image: none!important; /* Safari 3.1-5 */
    	-moz-border-image: none!important; /* Motzilla */
	    -o-border-image: none!important; /* Opera 11-12.1 */
	    border-image: none!important;
  	}
  	else {
  		-webkit-border-image: url($_border-image-source) $_border-image-slice $_border-image-width $_border-image-repeat; /* Safari 3.1-5 */
		-moz-border-image: url($_border-image-source) $_border-image-slice $_border-image-width $_border-image-repeat; /* Motzilla */
	    -o-border-image: url($_border-image-source) $_border-image-slice $_border-image-width $_border-image-repeat; /* Opera 11-12.1 */
	    border-image: url($_border-image-source) $_border-image-slice $_border-image-width $_border-image-repeat;
    }
}

// .box-shadow(HORIZONTAL VERTICAL BLUR COLOR))
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
	@include prefixer (box-shadow, $shadow, webkit spec );
}

// .drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);
@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
	-webkit-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
	-moz-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
	box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
}

@mixin text-shadow($text-shadow) {
	@include prefixer (text-shadow, $text-shadow, webkit moz spec);
}	







// .background(VALUE);
@mixin background($_color) {
	//background-color : hsla(hue($color), saturation($color), lightness($color), $alpha);
	//@include prefixer(background-size, $size, webkit moz o spec );
	-webkit-background: $_color;
    -moz-background: $_color;
    -o-background: $_color;
    background: $_color;
}

// .background-alpha(VALUE VALUE);
@mixin background-alpha($color: $white, $alpha: 1) {
	background-color : hsla(hue($color), saturation($color), lightness($color), $alpha);
}

// .background-size(VALUE VALUE);
@mixin background-size($size){
	//@include prefixer(background-size, $size, webkit moz o spec );
	-webkit-background-size : $size;
	-moz-background-size : $size;
	-o-background-size : $size;
	background-size : $size;
}

// .background-clip(VALUE); (border-box, padding-box, content-box)
@mixin background-clip($clip) {
	-webkit-background-clip : $clip;
	-moz-background-clip : $clip;
	background-clip : $clip;
}

// .box-sizing(VALUE); (border-box, padding-box, content-box)
@mixin box-sizing($boxsize: border-box) {
	-webkit-box-sizing : $boxsize;
	-moz-box-sizing : $boxsize;
	-ms-box-sizing : $boxsize;
	box-sizing : $boxsize;
}


// .resize(VALUE) (none, both, horizontal, vertical, inherit)

@mixin resize($direction: both) {
	resize : $direction;
	overflow : auto;
}

// .columns(250px, 0, 24px, COLOR, solid, 1px)

@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #eee, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
	-webkit-column-width : $colwidth;
	-webkit-column-count : $colcount;
	-webkit-column-gap : $colgap;
	-webkit-column-rule-color : $columnRuleColor;
	-webkit-column-rule-style : $columnRuleStyle;
	-webkit-column-rule-width : $columnRuleWidth;
	-moz-column-width : $colwidth;
	-moz-column-count : $colcount;
	-moz-column-gap : $colgap;
	-moz-column-rule-color : $columnRuleColor;
	-moz-column-rule-style : $columnRuleStyle;
	-moz-column-rule-width : $columnRuleWidth;
	column-width : $colwidth;
	column-count : $colcount;
	column-gap : $colgap;
	column-rule-color : $columnRuleColor;
	column-rule-style : $columnRuleStyle;
	column-rule-width : $columnRuleWidth;
}


@mixin appearance ($appearance) {
	@include prefixer (appearance, $appearance, webkit moz ms o spec);
}